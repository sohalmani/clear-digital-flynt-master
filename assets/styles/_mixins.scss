@use "sass:math";
@use "sass:map";
@use "sass:string";
@use "sass:list";

/**
 * Grid Mixins
 */

@mixin grid(
  $columns,
  $alignment: flex-start,
  $gutter-horizontal: $gutter-width,
  $gutter-vertical: $gutter-width
) {
  display: flex;
  flex-wrap: wrap;
  inline-size: 100%;
  justify-content: $alignment;

  > * {
    inline-size: calc((#{100% / $columns}) -
    (#{$columns - 1} / #{$columns} * #{$gutter-horizontal}));

    &:nth-child(n) {
      margin-block-start: 0;
      margin-inline-end: $gutter-horizontal;
    }

    &:nth-child(1n + #{$columns + 1}) {
      margin-block-start: $gutter-vertical;
    }

    &:nth-child(#{$columns}n) {
      margin-inline-end: 0;
    }

    &:last-child {
      margin-inline-end: 0;
    }
  }
}

@mixin reset-grid {
  display: block;

  > * {
    inline-size: auto;

    &:nth-child(n) {
      margin-block-start: 0;
      margin-inline-end: 0;
    }
  }
}

@mixin row($gutter: null) {
  display: flex;
  flex-wrap: wrap;
  margin-inline: if($gutter != null, $gutter, calc(var(--column-gap) * -1));

  > * {
    padding-inline: if($gutter != null, $gutter, var(--column-gap));
  }
}

@mixin col($size: false, $columns: 12) {
  @if $size {
    @if $size == auto {
      flex: 0 0 auto;
      inline-size: auto;
      max-inline-size: 100%; // Reset earlier grid tiers
    } @else if $size == 0 {
      @warn 'Number of columns cannot be zero.';
    } @else if $size > $columns {
      @warn 'Number of columns cannot exceed the total number of specified grid columns.';
    } @else {
      flex: 0 0 math.percentage(math.div($size, $columns));
      // Add a `max-width` to ensure content within each column does not blow out
      // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
      // do not appear to require this.
      inline-size: 100%;
      max-inline-size: math.percentage(math.div($size, $columns));
    }
  } @else {
    // Flexible column with remaining space
    flex-basis: 0;
    flex-grow: 1;
    inline-size: 100%;
    max-inline-size: 100%;
  }
}

@mixin offset($size, $columns: 12) {
  @if $size == 0 {
    @warn '';
  } @else if $size >= $columns {
    @warn 'Offsetting by the width of an entire row isn\'t possible.';
  } @else {
    $num: math.div($size, $columns);
    margin-inline-start: if($num == 0, 0, math.percentage($num));
  }
}

@mixin row-cols($count, $columns: 12) {
  @if $count == 0 {
    @warn '';
  } @else if $count > $columns {
    @warn 'Number of columns cannot exceed the total number of specified grid columns.';
  } @else {
    > * {
      flex: 0 0 math.div(100%, $count);
      max-inline-size: math.div(100%, $count);
    }
  }
}

/**
 * Typography Mixins
 */

@mixin typography-eyebrow() {
  display: block;
  font-size: 2rem;
  font-style: normal;
  font-weight: 400;
  letter-spacing: 0;
  line-height: 1.3;
  margin-block: 0 1.5rem;

  @media (min-width: $breakpoint-tablet) {
    font-size: 2.5rem;
    margin-block-end: 2rem;
  }
}

@mixin typography-blurb() {
  font-size: 1.8rem;
  font-style: normal;
  font-weight: 400;
  letter-spacing: 0;
  line-height: 1.3;
  margin-block: 1.5rem 0;

  @media (min-width: $breakpoint-tablet) {
    font-size: 2rem;
    margin-block-start: 2rem;
  }
}
